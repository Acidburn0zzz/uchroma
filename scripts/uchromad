#!/usr/bin/env python3

import argparse
import asyncio
import atexit
import logging
import signal
import sys

import gbulb

from uchroma.dbus import DeviceManagerAPI
from uchroma.device_base import BaseUChromaDevice
from uchroma.device_manager import UChromaDeviceManager


logging.basicConfig(stream=sys.stdout, level=logging.INFO)


TRACE = 5

class UChromaServer(object):

    def __init__(self):
        self._dbus = None

        gbulb.install()

        parser = argparse.ArgumentParser(description='UChroma daemon')
        parser.add_argument("-v", "--version", action='version', version='self.version')
        parser.add_argument("-d", "--debug", action='append_const', const=True,
                            help='Enable debug output')

        args = parser.parse_args()

        self._logger = logging.getLogger('uchroma.server')

        self._loop = asyncio.get_event_loop()

        if args.debug is not None:
            if len(args.debug) > 0:
                level = logging.DEBUG
                if len(args.debug) > 1:
                    level = TRACE
                    self._logger.debug("TRACE logging enabled!")
                logging.getLogger().setLevel(level)
                self._loop.set_debug(True)



    @asyncio.coroutine
    def _dm_callback(self, action: str, device: BaseUChromaDevice):
        self._logger.info('%s: %s', action, device)
        device.restore_prefs()


    def _shutdown_callback(self):
        self._logger.info("Shutting down")

        self._loop.stop()


    def run(self):
        dm = UChromaDeviceManager()
        dm.callbacks.append(self._dm_callback)

        atexit.register(UChromaServer.exit, self._loop)

        self._dbus = DeviceManagerAPI(dm)

        for sig in (signal.SIGINT, signal.SIGTERM):
            self._loop.add_signal_handler(sig, self._shutdown_callback)

        try:
            dm.monitor_start()
            self._dbus.run()

            self._loop.run_forever()

        except KeyboardInterrupt:
            pass

        finally:
            for sig in (signal.SIGINT, signal.SIGTERM):
                self._loop.remove_signal_handler(sig)

            dm.monitor_stop()
            dm.close_devices()


    @staticmethod
    def exit(loop):
        try:
            loop.run_until_complete(asyncio.gather(*list(asyncio.Task.all_tasks())))
            loop.close()
        except KeyboardInterrupt:
            pass


if __name__ == '__main__':
    UChromaServer().run()

