#!/usr/bin/env python3

import argparse
import logging
import sys

from uchroma import UChromaDeviceManager, LED, Splotch, __version__


logging.basicConfig(stream=sys.stdout, level=logging.INFO)


def print_err(*args):
    sys.stderr.write(' '.join(map(str, args)) + '\n')


class UChromaTool(object):

    def __init__(self):
        parser = argparse.ArgumentParser(description='Color control for Razer Chroma peripherals')
        parser.add_argument("-v", "--version", action='version', version='uChroma-%s' % __version__)
        parser.add_argument("--debug", action='store_true', help='Enable debug output')

        sub = parser.add_subparsers(title='Subcommands')

        list_devs = sub.add_parser('list', help='List devices')
        list_devs.set_defaults(func=self._list_devices)

        fx = sub.add_parser('fx', help='Lighting effects')
        fx.add_argument("-d", "--device", type=str,
                        help='HID device to use (/dev/hidrawX or USB identifier)')

        action = fx.add_mutually_exclusive_group(required=True)
        action.add_argument("--get-brightness", action='store_true',
                            help='Get current brightness level')
        action.add_argument("--set-brightness", metavar='BRIGHTNESS', type=float,
                            help='Set brightness (0-100)')
        action.add_argument("--disable", action='store_true',
                            help='Disable all effects')
        action.add_argument("--rainbow", action='store_true',
                            help='A rainbow of hues')
        action.add_argument("--spectrum", action='store_true',
                            help='Cycle colors thru the spectrum')
        action.add_argument("--wave", action='store_true',
                            help='Waves of color')
        action.add_argument("--breathe", action='store_true',
                            help='Colors fade in and out in sequence')
        action.add_argument("--fire", action='store_true',
                            help='Keys on fire!')
        action.add_argument("--morph", action='store_true',
                            help='Morphing colors as you type')
        action.add_argument("--reactive", action='store_true',
                            help='Enable the reactive keys effect')
        action.add_argument("--starlight", action='store_true',
                            help='Keys sparkle with color')
        action.add_argument("--static", action='store_true',
                            help='Set a static lighting color')
        action.add_argument("--sweep", action='store_true',
                            help='Color sweeping over a another')

        custom_group = fx.add_argument_group('Effect customization options')
        custom_group.add_argument('-s', '--speed', type=int, help='Effect speed')

        color = custom_group.add_mutually_exclusive_group()
        color.add_argument('-x', '--splotch', type=str,
                           choices=[x.name.lower() for x in Splotch],
                           help='Predefined color pairs')
        color.add_argument('-c', '--color', type=str, action='append',
                           help='Color name or hexcode')

        fx.set_defaults(func=self._fx_parser)

        led = sub.add_parser('led', help='LED control')
        led.add_argument("-d", "--device", type=str,
                         help='HID device to use (/dev/hidrawX or USB identifier)')

        led.add_argument('led_type', metavar='LED type', type=str,
                         choices=[x.name.lower() for x in LED.Type],
                         help='Type of LED to control')
        led.add_argument('-i', '--info', action='store_true', help='Get status of LED')

        ledx = led.add_argument_group('LED attributes')
        ledx.add_argument('-s', '--state', type=bool,
                          help='State for the LED')
        ledx.add_argument('-m', '--mode', type=str,
                          choices=[x.name.lower() for x in LED.Mode],
                          help='Mode for the LED')
        ledx.add_argument('-c', '--color', type=str,
                          help='RGB color for the LED')
        ledx.add_argument('-b', '--brightness', metavar='BRIGHTNESS', type=float,
                          help='Set brightness (0-100)')
        led.set_defaults(func=self._led_parser)


        test = sub.add_parser('test', help='Test commands')
        test.add_argument('path', metavar='Device path', type=str,
                          help='Test if path is a uChroma device (udev)')
        test.set_defaults(func=self._test_device)


        self._args = parser.parse_args()

        if self._args.debug:
            logging.getLogger().setLevel(logging.DEBUG)

        if not hasattr(self._args, 'func'):
            parser.print_help()
            sys.exit(1)

        self._driver = None
        self._dm = None


    def _get_driver(self, args):
        if args.device is not None:
            if args.device not in self._dm.devices:
                sys.exit(1)

            self._driver = self._dm.devices[args.device]

        elif len(self._dm.devices) == 1:
            self._driver = self._dm.devices[list(self._dm.devices.keys())[0]]
        else:
            print_err("Multiple devices found, select one with --device")
            sys.exit(1)


    def run(self):
        self._dm = UChromaDeviceManager()

        self._args.func(self._args)


    def finish(self):
        if self._driver is not None:
            self._driver.close()


    def _list_devices(self, args):
        for key in self._dm.devices:
            d = self._dm.devices[key]
            print('[%s]: %s' % (key, d.name))
        sys.exit(0)


    @staticmethod
    def _get_splotch(args):
        if args.splotch is None:
            return None
        return Splotch[args.splotch.upper()]


    @staticmethod
    def _get_color(args, num):
        if args.color is None:
            return None

        if len(args.color) <= num:
            return None

        return args.color[num]


    def _test_device(self, args):
        if args.path.startswith('/dev/hidraw'):
            if args.path not in self._dm.devices:
                sys.exit(1)
        elif args.path.startswith('/dev/bus/usb'):
            found = False
            ids = args.path.split('/')
            match = '%04x:%04x:' % (int(ids[-2]), int(ids[-1]))
            for key in self._dm.devices:
                if key.startswith(match):
                    found = True
                    break

            if not found:
                sys.exit(1)

            print('UCHROMA_DEVICE=1')
            sys.exit(0)


    def _fx_parser(self, args):
        self._get_driver(args)

        if args.set_brightness is not None:
            if args.set_brightness < 0 or args.set_brightness > 100:
                print_err('Brightness must be between 0 and 100')
                sys.exit(1)

            self._driver.brightness = args.set_brightness

        elif args.get_brightness:
            print('%f' % self._driver.brightness)

        if args.breathe:
            if not self._driver.breathe(color1=UChromaTool._get_color(args, 0),
                                        color2=UChromaTool._get_color(args, 1),
                                        splotch=UChromaTool._get_splotch(args), speed=args.speed):
                sys.exit(1)

        elif args.disable:
            if not self._driver.disable():
                sys.exit(1)

        elif args.fire:
            if not self._driver.fire(color=UChromaTool._get_color(args, 0), speed=args.speed):
                sys.exit(1)

        elif args.morph:
            if not self._driver.morph(base_color=UChromaTool._get_color(args, 0),
                                      color=UChromaTool._get_color(args, 1),
                                      splotch=UChromaTool._get_splotch(args), speed=args.speed):
                sys.exit(1)

        elif args.rainbow:
            if not self._driver.rainbow():
                sys.exit(1)

        elif args.reactive:
            if not self._driver.reactive(color=UChromaTool._get_color(args, 0), speed=args.speed):
                sys.exit(1)

        elif args.spectrum:
            if not self._driver.spectrum():
                sys.exit(1)

        elif args.starlight:
            if not self._driver.starlight(color1=UChromaTool._get_color(args, 0),
                                          color2=UChromaTool._get_color(args, 1),
                                          splotch=UChromaTool._get_splotch(args), speed=args.speed):
                sys.exit(1)

        elif args.static:
            if not self._driver.static_color(color=UChromaTool._get_color(args, 0)):
                sys.exit(1)

        elif args.sweep:
            if not self._driver.sweep(base_color=UChromaTool._get_color(args, 0),
                                      color=UChromaTool._get_color(args, 1),
                                      splotch=UChromaTool._get_splotch(args), speed=args.speed):
                sys.exit(1)

        elif args.wave:
            if not self._driver.wave():
                sys.exit(1)


    def _led_parser(self, args):
        self._get_driver(args)

        led = self._driver.get_led(LED.Type[args.led_type.upper()])
        if led is None:
            sys.exit(1)

        if args.info:
            led_type = None
            if led.led_type is not None:
                led_type = led.led_type.name

            state = None
            if led.state is not None:
                print(led.state)
                state = led.state.name

            mode = None
            if led.mode is not None:
                mode = led.mode.name

            print('type=%s,state=%s,color=%s,mode=%s,brightness=%f' \
                  % (led_type, state, repr(led.color), mode, led.brightness))

        else:
            if args.state is not None:
                led.state = LED.State[args.state.upper()]

            if args.mode is not None:
                led.mode = LED.Mode[args.mode.upper()]

            if args.color is not None:
                led.color = args.color.lower()

            if args.brightness is not None:
                if args.brightness < 0 or args.brightness > 100:
                    print_err("Brightness value must be between 0 and 100")
                    exit(1)

                led.brightness = args.brightness


tool = UChromaTool()
try:
    tool.run()
finally:
    tool.finish()
