#!/usr/bin/env python3

import argparse
import sys

from uchroma import DeviceManager, Splotch


def get_splotch():
    if args.splotch is None:
        return None
    return Splotch[args.splotch.upper()]


parser = argparse.ArgumentParser()

devs = parser.add_mutually_exclusive_group()
devs.add_argument("-d", "--device", type=str,
                    help='HID device to use (/dev/hidrawX)') 
devs.add_argument("-l", "--list-devices", action='store_true')

action = parser.add_mutually_exclusive_group()
action.add_argument("-b", "--breathe", action='store_true')
action.add_argument("-n", "--disable", action='store_true')
action.add_argument("-i", "--starlight", action='store_true')
action.add_argument("-r", "--reactive", action='store_true')
action.add_argument("-s", "--spectrum", action='store_true')
action.add_argument("-t", "--static", action='store_true')
action.add_argument("-w", "--wave", action='store_true')

parser.add_argument('-x', '--splotch', type=str, help='Color splotch [earth|air|fire|water|sun|moon]')

args = parser.parse_args()

dm = DeviceManager()

if args.list_devices:
    for key in dm.devices:
        d = dm.devices[key]
        print('%s: [%04x] %s' % (key, d.product_id, d.name))
    sys.exit(0)

driver = None
if args.device is not None:
    driver = dm.devices[driver]
elif len(dm.devices) == 1:
    driver = dm.devices[list(dm.devices.keys())[0]]
else:
    raise ValueError("Multiple devices found, select one with --device")


try:
    if args.breathe:
        if not driver.breathe_effect(splotch=get_splotch()):
            sys.exit(1)

    elif args.disable:
        if not driver.disable_effects():
            sys.exit(1)

    elif args.starlight:
        if not driver.starlight_effect(splotch=get_splotch()):
            sys.exit(1)

    elif args.reactive:
        if not driver.reactive_effect():
            sys.exit(1)

    elif args.spectrum:
        if not driver.spectrum_effect():
            sys.exit(1)

    elif args.static:
        if not driver.set_color():
            sys.exit(1)

    elif args.wave:
        if not driver.wave_effect():
            sys.exit(1)

finally:
    driver.close()

print("OK")
